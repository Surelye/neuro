(defpackage #:nntask4
  (:use #:cl)
  (:export #:nntask4))


(in-package #:nntask4)


(defun nntask4 ()
  (flet ((get-filename ()
           (let (filename)
             (loop
               (setq filename (read-line))
               (when (uiop:file-exists-p filename)
                 (return))
               (format t "~%Файла с указанным именем не существует! Попробуйте ввести имя файла снова: "))
             filename)))
    (let (matrix vector network errors result)
      (format t "~%Введите имя файла, в котором содержится набор матриц весов: ")
      (setq matrix (uiop:read-file-lines (get-filename)))
      (format t "~%Введите имя файла, в котором содержится входной вектор: ")
      (setq vector (uiop:split-string (uiop:read-file-line (get-filename)) :separator " ")
            network (net:build-network matrix))
      (handler-case (setq vector (mapcar #'parse-integer vector))
        (error ()
          (setq errors (cons 'VEC-CONTENT errors))))
      (setq errors (reverse (append (net:check-correct-network network vector) errors)))
      (format t "~2%~25t[ОШИБКИ]~2%")
      (unless (null errors)
        (net:display-errors errors)
        (format t "~%Поскольку были найдены ошибки, нейронная сеть не может быть построена.")
        (return-from nntask4))
      (format t "Ошибки не найдены.~%")
      (setq result (net:feed-network network vector))
      (format t "~%Введите имя файла, в который будет записана НС: ")
      (net:save-network-as-xml network (read-line))
      (format t "~%Введите имя файла, в который будет записан результат вычисления вектора НС: ")
      (with-open-file (out (read-line) :direction :output :if-exists :supersede
                                       :if-does-not-exist :create)
        (format out "~{~a~^, ~}~%" result))) t))
